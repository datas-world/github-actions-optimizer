name: Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'
    # Auto-update pre-commit hooks weekly on Mondays at 4 AM UTC
    - cron: '0 4 * * 1'
    # Run CodeQL analysis weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

permissions:
  contents: write
  security-events: write
  actions: read
  pull-requests: write

jobs:
  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'schedule' || github.event.schedule == '0 4 * * 1'

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          # Install additional dependencies for pre-commit hooks
          pip install black isort flake8 mypy bandit pydocstyle types-PyYAML pytest rich
          # Install security scanning tools
          pip install pip-audit safety detect-secrets

      - name: Install system dependencies
        run: |
          # Install jq for JSON processing
          sudo apt-get update
          sudo apt-get install -y jq
          # Install act for local testing (see GitHub Issue #2 - Caching Removal)
          curl -s https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files --verbose

      - name: Run mypy separately (workaround for pre-commit network issues)
        run: |
          mypy --strict gh_actions_optimizer/

      - name: Run security scans (fail on issues)
        run: |
          echo "üîç Running comprehensive security scans..."
          
          # Bandit security scan (fail on HIGH severity issues)
          echo "Running bandit security scan..."
          bandit -r gh_actions_optimizer/ --format json --severity-level high > bandit-report.json
          if [ -s bandit-report.json ] && [ "$(jq '.results | length' bandit-report.json)" -gt 0 ]; then
            echo "‚ùå High severity security issues found by bandit!"
            jq '.results[] | "File: \(.filename), Line: \(.line_number), Issue: \(.issue_text)"' bandit-report.json
            exit 1
          fi
          
          # Dependency vulnerability scan with pip-audit
          echo "Running pip-audit dependency scan..."
          pip-audit --desc --strict --format json > pip-audit-report.json || {
            echo "‚ùå Vulnerabilities found in dependencies!"
            cat pip-audit-report.json
            exit 1
          }
          
          # Secret detection scan
          echo "Running detect-secrets scan..."
          detect-secrets scan --exclude-files '\.git/' --exclude-files '\.mypy_cache/' --exclude-files '__pycache__/' . > current-secrets.json
          if [ "$(jq '.results | length' current-secrets.json)" -gt 0 ]; then
            echo "‚ùå Secrets detected in codebase!"
            jq '.results' current-secrets.json
            exit 1
          fi
          
          echo "‚úÖ All security scans passed!"

      - name: Auto-update pre-commit hooks (scheduled only)
        if: github.event_name == 'schedule' && github.event.schedule == '0 4 * * 1'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Update pre-commit hooks
          pre-commit autoupdate

          # Check if there are changes
          if git diff --quiet; then
            echo "No pre-commit hook updates available"
          else
            # Commit and push changes
            git add .pre-commit-config.yaml
            git commit -m "chore: auto-update pre-commit hooks

            - Updated by GitHub Actions scheduled workflow
            - Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            git push
          fi

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name != 'schedule' || github.event.schedule == '0 2 * * *'

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coverage
          pip install -e .[dev]

      - name: Install system dependencies
        run: |
          # Install jq for JSON processing
          sudo apt-get update
          sudo apt-get install -y jq
          # Install act for local testing (see GitHub Issue #2 - Caching Removal)
          curl -s https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash

      - name: Test extension functionality
        run: |
          chmod +x gh-actions-optimizer
          python gh-actions-optimizer --help

      - name: Test extension.yml configuration
        run: |
          # Validate extension.yml format
          python -c "
          import yaml
          with open('extension.yml', 'r') as f:
              config = yaml.safe_load(f)
          print('Extension config:', config)
          assert 'name' in config
          assert 'description' in config
          assert 'host' in config
          print('‚úì Extension configuration is valid')
          "

      - name: Test GitHub CLI extension
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Test extension functionality directly (skip local installation due to repository name constraint)
          # GitHub CLI extensions require repository names starting with 'gh-' for local installation
          chmod +x gh-actions-optimizer

          # Test as direct executable (equivalent to gh extension functionality)
          ./gh-actions-optimizer --help
          ./gh-actions-optimizer --version

          # Test some commands with sample data
          ./gh-actions-optimizer analyze --sample-data
          ./gh-actions-optimizer security --sample-data

      - name: Run tests with coverage
        run: |
          pytest --cov --cov-branch --cov-report=xml --cov-report=term-missing tests/

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.13'
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00 # v5.5.0
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build Python Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.13'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-manifest

      - name: Verify package manifest
        run: check-manifest

      - name: Build package
        run: python -m build

      - name: Check package
        run: |
          twine check dist/*
          python -m pip install dist/*.whl
          gh-actions-optimizer --version

      - name: Upload build artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: python-package-${{ github.sha }}
          path: dist/
          retention-days: 30

  security:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Skip on PRs to avoid extension pack issues, only run on main branch pushes
    if: (github.event_name != 'schedule' || github.event.schedule == '0 3 * * 0') && github.event_name != 'pull_request'

    strategy:
      fail-fast: false
      matrix:
        language: ['python']

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          # For PR analysis, ensure we have both base and head
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@4f3212b61783c3c68e8309a0f18a699764811cda # v3.27.1
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          config: |
            disable-default-path-filters: true
        env:
          # Completely disable PR diff analysis and extension packs - multiple flags
          CODEQL_ACTION_FEATURE_ANALYSIS_FILTER: false
          CODEQL_ACTION_FEATURE_WILL_UPLOAD: true
          CODEQL_DISABLE_EXTENSION_PACK: true
          CODEQL_DISABLE_PR_DIFF_RANGE: true

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@4f3212b61783c3c68e8309a0f18a699764811cda # v3.27.1
        with:
          category: "/language:${{matrix.language}}"

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          # Install jq for JSON processing
          sudo apt-get update
          sudo apt-get install -y jq
        run: |
          pytest --cov --cov-report=xml --cov-report=term-missing tests/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@e44258b109568baa0df60ed515909fc6c72cba92 # v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=datas-world_github-actions-optimizer
            -Dsonar.organization=datas-world
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=gh_actions_optimizer
            -Dsonar.tests=tests
            -Dsonar.python.xunit.reportPath=pytest.xml

  quality-summary:
    name: Quality Summary for PR
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    needs: [test, sonarcloud]

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install system dependencies
        run: |
          # Install jq for JSON processing
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get SonarCloud quality gate status
        id: sonar-quality
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get SonarCloud quality gate status using GitHub CLI
          PROJECT_KEY="datas-world_github-actions-optimizer"

          # Check quality gate status via SonarCloud API
          QUALITY_GATE_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${PROJECT_KEY}&pullRequest=${{ github.event.number }}" | \
            jq -r '.projectStatus.status // "ERROR"')

          echo "quality_gate_status=${QUALITY_GATE_STATUS}" >> $GITHUB_OUTPUT
          echo "SonarCloud Quality Gate Status: ${QUALITY_GATE_STATUS}"

          # Get detailed metrics
          COVERAGE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/measures/component?component=${PROJECT_KEY}&pullRequest=${{ github.event.number }}&metricKeys=coverage" | \
            jq -r '.component.measures[0].value // "N/A"')
          echo "sonar_coverage=${COVERAGE}" >> $GITHUB_OUTPUT

          BUGS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/measures/component?component=${PROJECT_KEY}&pullRequest=${{ github.event.number }}&metricKeys=bugs" | \
            jq -r '.component.measures[0].value // "0"')
          echo "sonar_bugs=${BUGS}" >> $GITHUB_OUTPUT

          VULNERABILITIES=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/measures/component?component=${PROJECT_KEY}&pullRequest=${{ github.event.number }}&metricKeys=vulnerabilities" | \
            jq -r '.component.measures[0].value // "0"')
          echo "sonar_vulnerabilities=${VULNERABILITIES}" >> $GITHUB_OUTPUT

          CODE_SMELLS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/measures/component?component=${PROJECT_KEY}&pullRequest=${{ github.event.number }}&metricKeys=code_smells" | \
            jq -r '.component.measures[0].value // "0"')
          echo "sonar_code_smells=${CODE_SMELLS}" >> $GITHUB_OUTPUT

      - name: Get Codecov status
        id: codecov-status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Wait a bit for Codecov to process the coverage report
          sleep 30

          # Get Codecov coverage status
          CODECOV_API="https://codecov.io/api/v2/github/${{ github.repository }}/pulls/${{ github.event.number }}"

          # Try to get coverage data from Codecov API
          COVERAGE_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.CODECOV_TOKEN }}" "${CODECOV_API}" || echo "{}")

          CODECOV_COVERAGE=$(echo "$COVERAGE_RESPONSE" | jq -r '.results.totals.coverage // "N/A"')
          echo "codecov_coverage=${CODECOV_COVERAGE}" >> $GITHUB_OUTPUT
          echo "Codecov Coverage: ${CODECOV_COVERAGE}%"

      - name: Create or update PR comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_QUALITY_GATE: ${{ steps.sonar-quality.outputs.quality_gate_status }}
          SONAR_COVERAGE: ${{ steps.sonar-quality.outputs.sonar_coverage }}
          SONAR_BUGS: ${{ steps.sonar-quality.outputs.sonar_bugs }}
          SONAR_VULNERABILITIES: ${{ steps.sonar-quality.outputs.sonar_vulnerabilities }}
          SONAR_CODE_SMELLS: ${{ steps.sonar-quality.outputs.sonar_code_smells }}
          CODECOV_COVERAGE: ${{ steps.codecov-status.outputs.codecov_coverage }}
        run: |
          # Comment identifier for upsert functionality
          COMMENT_IDENTIFIER="<!-- quality-summary-comment -->"

          # Determine if there are quality issues
          ISSUES_FOUND="false"

          if [ "$SONAR_QUALITY_GATE" != "OK" ] || [ "$SONAR_BUGS" != "0" ] || [ "$SONAR_VULNERABILITIES" != "0" ]; then
            ISSUES_FOUND="true"
          fi

          # Only create/update comment if there are quality issues
          if [ "$ISSUES_FOUND" = "true" ]; then
            # Create comment body
            cat > comment_body.md << 'COMMENT_EOF'
          ${COMMENT_IDENTIFIER}
          ## üîç Code Quality Summary
          
          **@copilot** Please review the following quality findings and provide remediation suggestions.
          
          ### SonarCloud Analysis
          
          | Metric | Value | Status |
          |--------|-------|--------|
          | Quality Gate | ${SONAR_QUALITY_GATE} | $([ "$SONAR_QUALITY_GATE" = "OK" ] && echo "‚úÖ Passed" || echo "‚ùå Failed") |
          | Coverage | ${SONAR_COVERAGE}% | $([ "$SONAR_COVERAGE" != "N/A" ] && [ "${SONAR_COVERAGE%.*}" -lt 80 ] 2>/dev/null && echo "‚ö†Ô∏è Below Target" || echo "‚úÖ Good") |
          | Bugs | ${SONAR_BUGS} | $([ "$SONAR_BUGS" = "0" ] && echo "‚úÖ None" || echo "‚ùå Found") |
          | Vulnerabilities | ${SONAR_VULNERABILITIES} | $([ "$SONAR_VULNERABILITIES" = "0" ] && echo "‚úÖ None" || echo "üî¥ Found") |
          | Code Smells | ${SONAR_CODE_SMELLS} | $([ "$SONAR_CODE_SMELLS" = "0" ] && echo "‚úÖ None" || echo "‚ö†Ô∏è Found") |
          
          ### Codecov Analysis
          
          | Metric | Value |
          |--------|-------|
          | Coverage | ${CODECOV_COVERAGE}% |
          
          ### Recommendations
          
          - **Review critical issues**: Address bugs and vulnerabilities immediately
          - **Improve test coverage**: Aim for at least 80% code coverage
          - **Code quality**: Fix code smells to improve maintainability
          
          ---
          
          ### Zusammenfassung der Codequalit√§t (German)
          
          **@copilot** Bitte √ºberpr√ºfen Sie die folgenden Qualit√§tsbefunde und geben Sie Empfehlungen zur Behebung.
          
          **SonarCloud-Analyse:**
          - Qualit√§tstor: ${SONAR_QUALITY_GATE}
          - Testabdeckung: ${SONAR_COVERAGE}%
          - Fehler: ${SONAR_BUGS}
          - Sicherheitsl√ºcken: ${SONAR_VULNERABILITIES}
          - Code-Smells: ${SONAR_CODE_SMELLS}
          
          **Empfehlungen:**
          - Kritische Probleme sofort beheben
          - Testabdeckung auf mindestens 80% erh√∂hen
          - Code-Qualit√§t durch Behebung von Code-Smells verbessern
          
          ---
          
          *This comment is automatically updated when quality scans complete.*
          COMMENT_EOF

            # Substitute environment variables
            envsubst < comment_body.md > comment_body_final.md

            # Check for existing comment
            EXISTING_COMMENT_ID=$(gh pr view ${{ github.event.number }} --json comments \
              --jq '.comments[] | select(.body | contains("quality-summary-comment")) | .id' | head -1)

            if [ -n "$EXISTING_COMMENT_ID" ]; then
              # Update existing comment
              gh api -X PATCH "/repos/${{ github.repository }}/issues/comments/${EXISTING_COMMENT_ID}" \
                -f body="$(cat comment_body_final.md)"
              echo "Updated existing quality summary comment #${EXISTING_COMMENT_ID}"
            else
              # Create new comment
              gh pr comment ${{ github.event.number }} --body-file comment_body_final.md
              echo "Created new quality summary comment"
            fi
          else
            echo "No quality issues found, skipping comment creation"

            # Remove existing comment if no issues found
            EXISTING_COMMENT_ID=$(gh pr view ${{ github.event.number }} --json comments \
              --jq '.comments[] | select(.body | contains("quality-summary-comment")) | .id' | head -1)

            if [ -n "$EXISTING_COMMENT_ID" ]; then
              gh api -X DELETE "/repos/${{ github.repository }}/issues/comments/${EXISTING_COMMENT_ID}"
              echo "Removed quality summary comment as no issues were found"
            fi
          fi

  extension-bundle:
    name: Create GitHub CLI Extension Bundle
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name != 'schedule'
    needs: [test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Create GitHub CLI extension bundle
        run: |
          # Create a distributable bundle for the extension
          mkdir -p gh-cli-extension-bundle
          cp -r gh_actions_optimizer/ gh-cli-extension-bundle/
          cp gh-actions-optimizer gh-cli-extension-bundle/
          cp extension.yml gh-cli-extension-bundle/
          cp requirements.txt gh-cli-extension-bundle/
          cp README.md gh-cli-extension-bundle/
          cp LICENSE gh-cli-extension-bundle/

          # Create tarball
          tar -czf gh-actions-optimizer-extension.tar.gz gh-cli-extension-bundle/

      - name: Upload GitHub CLI extension bundle
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: github-cli-extension-${{ github.sha }}
          path: gh-actions-optimizer-extension.tar.gz
          retention-days: 30
