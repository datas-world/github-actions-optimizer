name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

permissions:
  contents: read

jobs:
  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            .pre-commit-config.yaml

      - name: Cache pre-commit hooks
        uses: actions/cache@638ed79f9dc94c1de1baef91bcab5edaa19451f4 # v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          # Install additional dependencies for pre-commit hooks
          pip install black isort flake8 mypy bandit pydocstyle types-PyYAML pytest

      - name: Install system dependencies
        uses: awalsh128/cache-apt-pkgs-action@44c33b32f808cae6a59dcc81e2a2c6132f3d5003 # latest
        with:
          packages: act
          version: 1.0

      - name: Run pre-commit hooks
        run: |
          pre-commit install
          pre-commit run --all-files --show-diff-on-failure

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coverage
          pip install -e .[dev]

      - name: Install jq (required for extension)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Test extension functionality
        run: |
          chmod +x gh-actions-optimizer
          python gh-actions-optimizer --help
          python gh-actions-optimizer --version

      - name: Test all commands with sample data
        run: |
          chmod +x gh-actions-optimizer

          # Test all main commands with sample data
          echo "Testing analyze command with sample data..."
          python gh-actions-optimizer analyze --sample-data
          python gh-actions-optimizer analyze --sample-data --format json
          python gh-actions-optimizer analyze --sample-data --format yaml

          echo "Testing cost command..."
          python gh-actions-optimizer cost
          python gh-actions-optimizer cost --format json
          python gh-actions-optimizer cost --format yaml

          echo "Testing security command with sample data..."
          python gh-actions-optimizer security --sample-data
          python gh-actions-optimizer security --sample-data --format json
          python gh-actions-optimizer security --sample-data --format yaml

          echo "Testing runners command..."
          python gh-actions-optimizer runners
          python gh-actions-optimizer runners --format json
          python gh-actions-optimizer runners --format yaml

          echo "Testing generate commands..."
          python gh-actions-optimizer generate runner-setup --repo ${{ github.repository }}
          python gh-actions-optimizer generate runner-setup --repo ${{ github.repository }} --format yaml
          python gh-actions-optimizer generate workflow-patch --repo ${{ github.repository }}

          echo "Testing validate commands..."
          python gh-actions-optimizer validate runners --repo ${{ github.repository }}

          echo "Testing benchmark command..."
          python gh-actions-optimizer benchmark --repo ${{ github.repository }}

      - name: Test with explicit repository from environment
        run: |
          echo "Testing with explicit repository: ${{ github.repository }}"

          # Test commands with explicit repo specification
          python gh-actions-optimizer analyze --repo ${{ github.repository }} || echo "Expected: might not have workflows accessible via API"
          python gh-actions-optimizer security --repo ${{ github.repository }} || echo "Expected: might not have access to security settings"
          python gh-actions-optimizer generate runner-setup --repo ${{ github.repository }}
          python gh-actions-optimizer validate runners --repo ${{ github.repository }}
          python gh-actions-optimizer benchmark --repo ${{ github.repository }}

      - name: Test auto-detection (current repository)
        run: |
          echo "Testing auto-detection of current repository..."

          # Test commands with auto-detection (no --repo flag)
          python gh-actions-optimizer cost
          python gh-actions-optimizer runners
          python gh-actions-optimizer analyze --sample-data
          python gh-actions-optimizer security --sample-data

      - name: Validate command outputs and exit codes
        run: |
          echo "Validating that all commands produce valid output..."

          # Test that commands return proper exit codes
          python gh-actions-optimizer --help > /dev/null && echo "Help command: ✓ Success" || exit 1
          python gh-actions-optimizer --version > /dev/null && echo "Version command: ✓ Success" || exit 1

          # Test that sample data commands produce parseable JSON/YAML
          python gh-actions-optimizer analyze --sample-data --format json | jq empty && echo "JSON output: ✓ Valid" || exit 1
          FORCE_COLOR=0 python gh-actions-optimizer security --sample-data --format yaml | python -c "import yaml, sys; yaml.safe_load(sys.stdin)" && echo "YAML output: ✓ Valid" || exit 1

          echo "All output validation tests passed ✓"
  extension-test:
    name: Test GitHub CLI extension
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          sudo apt-get update && sudo apt-get install -y jq
          pip install -e .

      - name: Test extension commands
        run: |
          chmod +x gh-actions-optimizer

          # Test basic commands
          ./gh-actions-optimizer --help
          ./gh-actions-optimizer --version

          # Test individual commands
          ./gh-actions-optimizer cost --help
          ./gh-actions-optimizer runners --help

          # Test cost calculation
          ./gh-actions-optimizer cost --format json
          ./gh-actions-optimizer runners --format json

  security:
    name: Security scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Bandit results
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: bandit-results
          path: bandit-report.json
        if: always()

      - name: Run Safety dependency scan
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload Safety results
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: safety-results
          path: safety-report.json
        if: always()

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Dependency Review
        uses: actions/dependency-review-action@6fad41793215e16e31faa120c584d320a07b88de # v4
        with:
          fail-on-severity: moderate
