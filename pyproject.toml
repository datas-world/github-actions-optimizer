[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "github-actions-optimizer"
version = "0.1.0-dev"
description = "GitHub CLI extension for optimizing GitHub Actions workflows"
readme = "README.md"
license = { text = "GPL-3.0-or-later" }
authors = [{ name = "Torsten Marco Knodt", email = "torstenmarco@gmx.de" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: System :: Systems Administration",
]
keywords = [
    "github",
    "actions",
    "ci-cd",
    "optimization",
    "cost-analysis",
    "security",
    "devops",
    "cli",
    "github-cli",
    "extension",
]
requires-python = ">=3.10"
dependencies = [
    "rich>=13.0.0",  # Modern terminal handling with automatic capability detection
    "PyYAML>=6.0.0", # YAML processing for configuration and output formats
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "isort>=5.13.0",
    "bandit>=1.7.5",
    "pre-commit>=3.6.0",
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.4.0",
    "types-rich>=0.1.0", # Type stubs for Rich library
]

[project.urls]
Homepage = "https://github.com/datas-world/github-actions-optimizer"
Repository = "https://github.com/datas-world/github-actions-optimizer.git"
Issues = "https://github.com/datas-world/github-actions-optimizer/issues"
Documentation = "https://github.com/datas-world/github-actions-optimizer#readme"

[project.scripts]
gh-actions-optimizer = "gh_actions_optimizer:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["gh_actions_optimizer*"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["gh_actions_optimizer"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["gh_actions_optimizer"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]
